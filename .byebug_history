exit
s
hour_mark_approaches?
n
s
n
s
exit
ec2.request_spot_fleet(dry_run: true, spot_fleet_request_config: slave_fleet_params(desired_instance_count))
slave_fleet_params(desired_instance_count)
exit
slave_fleet_params(desired_instance_count)
exit
slave_fleet_params(desired_instance_count)[:spot_price]
slave_fleet_params(desired_instance_count)[:spot_fleet_request_config]
slave_fleet_params(desired_instance_count)
ec2.request_spot_fleet(dry_run: true, spot_fleet_request_config: slave_fleet_params(desired_instance_count))slave_fleet_params(desired_instance_count)a;sdkfjka;sdjg
ec2.request_spot_fleet(dry_run: true, spot_fleet_request_config: slave_fleet_params(desired_instance_count))
k
k = '2.0' * 0.7
'2.0' * 0.7
'2' * 0.5
[{k: '9'},{k: '2'}, {k: '3'}].min_by { |s| s[:k] }
['9', '1', '4', '2'].min
['9', '1', '4', '2']
ec2.request_spot_fleet(spot_fleet_request_config: slave_fleet_params(desired_instance_count))
slave_fleet_params(desired_instance_count)
exit
slave_image.tags.find { |t| t.key.include?(tag_name) }.value.split(',')
slave_image
tag_name
s
slave_image_tag_filter('instance types')
s
n
s
n
s
n
s
best_price
slave_fleet_launch_specifications
slave_fleet_launch_specification
s
exit
'windows'.split(',')
slave_image.tags.find { |t| t.key.include?(tag_name) }.value.split(',')
slave_image.tags.find { |t| t.key.include?(tag_name) }
tag_name
c
exit
slave_image.tags.find { |t| t.key.include? 'product' }.value
slave_image.tags.find { |t| t.key.include? 'product' }
slave_image.tags.find { |t| t.key.include? /\w/ }
slave_image.tags.find { |t| t.key.includ? /\w/ }
slave_image.tags.map { |t| t.key }
slave_image.tags
n
s
availability_zones
s
@spot_prices.empty?
@spot_prices
n
s
image
n
s
l
l-
n
s
 desired_instance_count
c
exit
slave_image.image_id
slave_image_tags.find { |t| t.key.include? 'product' }.value
slave_image_tags.find { |t| t.key.include? 'product' }
slave_image_tags.find { t.key.include? 'product' }
slave_image.tags.keys
slave_image.tags
slave_image
c
n
c
n
c
exit
slave_fleet_params(desired_instance_count)
s
n
s
n
s
n
s
exit
SecureRandom.hex
slave_fleet_params(desired_instance_count)
n
s
n
s
n
s
n
s
n
desired_instance_count
n
s
n
s
wip
n
counts
n
s
birth_ratio_acheived?
birth_ratio_achieved?
adjusted_birth_ratio
n
s
exit
'65'.to_f
wip_address
backlog_address
s
birth_ratio
s
n
s
